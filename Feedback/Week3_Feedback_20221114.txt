Starting code feedback for Vitor, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.67 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week3, .git, week1, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# Setting rules to ignore push files

# Setting rules for directories
*week4/
*.debris/

# Rules for files
*.idea
*.vscode
*.RData
*.Rhistory



**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# This is my CMEE Repository

This repository is based on my training for Computational Biology at Imperial College London.
The scripts and contents find here are based on the [TheMulQuaBio](https://mhasoba.github.io/TheMulQuaBio/intro.html) repository, authored by [Samraat Pawar](https://www.imperial.ac.uk/people/s.pawar).


Over this course I will gain competence over programming languages such as BASH, Pyhton and R.

On [Week1](https://github.com/vitorlcferreira/CMEECourseWork/tree/master/week1) we focused on:

- UNIX and BASH

- Shell Scripting

- LaTeX
<br>

On [Week2](https://github.com/vitorlcferreira/CMEECourseWork/tree/master/week2) the focus was particularly on Python programming languages.
The main learning was based on:

- Basic syntax and data structures

- ipython Environment

- Writing Python code, loops, comprehensions and functions

- Implementation of control flows

- Pyhton Input/Output

- Writing, debbugging, using and testing Python functions

<br>

In [Week3](...) we continue to develop skills on Biological computing using R. Particularly, the learning was based on:

- Basic R syntax and programming conventions

- Principles of data processing and exploration

- Clean and efficient programming using R

- Developing reproducible data analysis workflows

- Introduction to vectorization and efficiency for simulations

- Finding, fixing and catching erros with debugging

- Data wrangling, visualization with tidyverse

- Introduction to sql databases in R

### Dependencies:

To run some of the scripts found in this folder, some specific packages are required. Please run the following code in R interpreter:
```R
install.packages(c("tidyverse", "maps", "reshape2", "sqldf"))
```
---

## Technical Skills

### Programming Languages

<div>
  <img src="https://github.com/devicons/devicon/blob/master/icons/r/r-original.svg" title="R" alt="R" width="80" height="80"/>&nbsp;
  <img src="https://github.com/devicons/devicon/blob/master/icons/python/python-original-wordmark.svg" title="Python" alt="Python" width="80" height="80"/>&nbsp;
  <img src="https://github.com/devicons/devicon/blob/master/icons/bash/bash-original.svg" title="Bash" alt="Bash" width="80" height="80"/>&nbsp;
</div>
<br>

### Other Tools

<div>
  <img src="https://github.com/devicons/devicon/blob/master/icons/linux/linux-original.svg" title="Linux" alt="Linux" width="80" height="80"/>&nbsp;
  <img src="https://github.com/devicons/devicon/blob/master/icons/git/git-original.svg" title="Git" alt="Git" width="80" height="80"/>&nbsp;
</div>
<br>

---


If you have any questions regarding the materials please get in touch.

Vitor Ferreira

f.ferreira22@imperial.ac.uk
<div>
<img src="https://imperialcollegelondon.github.io/newimages/ImperialCollegeLondon.svg" title="ICL" alt="ICL" width="200" height="200"/>&nbsp;
</div>

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************

# Week 3

In this folder are the scripts and essential data to run the practicals from the third week of the course. Inside the folder [code](https://github.com/vitorlcferreira/CMEECourseWork/tree/master/week3/code) you will find the R scripts that perform the following tasks:

- [basic_io.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/basic_io.R) - Simple script illustrating R inputs and outputs

- [control_flow.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/control_flow.R) - Script illustrating the use of control flow statements

- [break.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/break.R) - Script illustrating the implementation of break argument

- [boilerplate.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/boilerplate.R) - A boilerplate R script

- [R_conditionals.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/R_conditionals.R) - R script for testing functions with conditionals

- [TreeHeight.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/TreeHeight.R) - This function calculates heights of trees given distance of each tree from its base and angle to its top

- [Vectorize1.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Vectorize1.R) - This script illustrates the differences using normal operations against in-built functions that uses vectorization

- [preallocate.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/preallocate.R) - This script is testing pre-allocation of memory

- [apply1.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/apply1.R) - Testing family of apply functions

- [apply2.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/apply2.R) - Testing family of apply functions

- [sample.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/sample.R) - This script tests a compilation of techniques using normal operations,Loops, List on vectors, with and without pre-allocation of memory,and also the use o apply family functions such as SAPPLY for vector output, or LAPPY for lists output

- [Ricker.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Ricker.R) - Script with Ricker Population Model function

- [Vectorize2.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Vectorize2.R) - This script contains  one solution for the problem of the Ricker model provided by Samraat Pawar located in the TheMulQuaBio repo

- [browse.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/browse.R) - This script tests for debugging steps using different functions

- [try.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/try.R) - This script illustrate the use of techniques to capture errors

- [Florida.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Florida.R) - Analysis script on the practical "Is Florida getting warmer?" from [TheMulQuaBio](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#id2) repo

- [DataWrang.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/DataWrang.R) - Script illustrating the data wrangling techniques

- [DataWrangTidy.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/DataWrangTidy.R) - Script illustrating  data wrangling techniques with tidyverse

- [PP_Dists.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/PP_Dists.R) - This script analyses the Bodymass distributions and produces individual and ratio plots, and a results summary file

- [PP_Regress.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/PP_Regress.R) - This script tries to replicate the plotting suggested from Samraat Pawar at the [TheMulQuaBio](https://mhasoba.github.io/TheMulQuaBio/notebooks/08-Data_R.html#id3) repo and additionally produces its Linear Models results into a CSV

- [Girko.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Girko.R) - This script builds Girko's circular law function and creates a plot of it

- [MyBars.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/MyBars.R) - Script with annotation plot example

- [plotLin.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/plotLin.R) - Script with mathematical annotation in plot

- [GPDD_Data.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/GPDD_Data.R) - This script plots the distributions of populations form GPDD database

- [Florida_LaTeX.sh](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Florida_LaTeX.sh) - shell script that runs Florida analysis, compiles TEX file and produces the PDF

- [Florida_Prac.tex](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/Florida_Prac.tex) - source LaTeX code for the Florida results

- [SQLinR.R](https://github.com/vitorlcferreira/CMEECourseWork/blob/master/week3/code/SQLinR.R) - script handles with database manipulations and queries

**********************************************************************

Results directory is empty - good! 

Found 28 code files: Girko.R, TreeHeight.R, apply2.R, PP_Regress.R, vectorize1.R, browse.R, Florida_LaTeX.sh, boilerplate.R, Florida_Prac.tex, vectorize2.R, control_flow.R, DataWrangTidy.R, SQLinR.R, PP_Dists.R, preallocate.R, try.R, MyBars.R, Ricker.R, break.R, apply1.R, basic_io.R, DataWrang.R, plotLin.R, GPDD_Data.R, Florida.R, next.R, sample.R, R_conditionals.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: Girko.R
## Description: This script builds Girko's circular law function and 
##              creates a plot of it
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: none
## Outputs: Girko.pdf
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Clear graphics
graphics.off()

# Load Libraries
suppressMessages(require(tidyverse, quietly = T))

# Define Girko's circular law function
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}


# Defining parameters

N <- 250

M <- matrix(rnorm(N * N), N, N) # Building the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # renaming columns


# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")


# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))


# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))

pdf("../results/Girko.pdf")
print(p)
graphics.off()

**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 2.67468s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: TrreHeight.R
## Description: This function calculates heights of trees given distance of 
##              each tree from its base and angle to its top
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: ../data/trees.csv
## Arguments: degress and distance
## Outputs: Height of trees, using same units as "distance"
##------------------------------------------

# To calculate the heights of trees, given the distance of each tree from its 
# base and angle to its top, it was used a trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)


# Clear environment
rm(list = ls())


# Defining function
TreeHeight <- function(degrees, distance) {
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  # print(paste("Tree height is:", height))
  return (height)
}


# Loading data
tree_data <- read.csv("../data/trees.csv")

print("Calculating Tree Heights...")

# Calculating Tree Heights from trees.csv 
Height <- TreeHeight(tree_data$Angle.degrees, tree_data$Distance.m)
tree_data <- cbind(tree_data, Height)


##------------------------------------------
# Writing output to file
write.table(tree_data, "../results/TreeHts.csv", row.names = FALSE)
print("File saved in Results folder!!!")

**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Calculating Tree Heights..."
[1] "File saved in Results folder!!!"

**********************************************************************

Code ran without errors

Time consumed = 0.33721s

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: apply2.R
## Description: Testing family of apply functions
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())


#=============================
# Using apply() functions
#=============================
set.seed(10)

SomeOperation <- function(v){
  if (sum(v) > 0) {
    return(v * 100)
  } else {
    return (v)
  }
}

M <- matrix(rnorm(100), 10, 10)
print(apply(M, 1, SomeOperation))

# Apply function here feeds the whole row of matrix (M) into the function;
# evaluates it as the sum(v), this case is sum(M[1,]), and it will store as column
# which needs to be transposed afterwards to return to its original structure
a <- apply(M, 1, SomeOperation)
a <- t(a)
a


**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
             [,1]        [,2]        [,3]       [,4]       [,5]        [,6]
 [1,]  0.01874617 -0.18425254 -1.37133055  -59.91677  0.2945451   38.979430
 [2,]  1.10177950  0.75578151 -0.23823356   98.74447  0.7413901    8.934727
 [3,] -0.59631064 -2.18528684 -0.67486594 -211.90612 -1.2651980  -37.366156
 [4,] -1.85374045 -0.07794607  0.96856634   18.49260 -1.3799436 -143.551436
 [5,]  1.08655140 -0.76254488 -0.82866254   83.44739 -0.9676520   -2.881534
 [6,] -0.40063755 -0.33455657  1.36795395  21
**********************************************************************

Code ran without errors

Time consumed = 0.33913s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: PP_Regress.R
## Description: This script tries to replicate the plotting suggested from 
##              Samraat Pawar at the TheMulQuaBio repo 
##              (https://mhasoba.github.io/TheMulQuaBio/notebooks/08-Data_R.html#id3)
##              and additionally produces its Linear Models results into a CSv 
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: EcolArchives-E089-51-D1.csv
## Outputs: PP_Regress_figure.pdf, PP_Regress_Results.csv
##------------------------------------------

# Clean enviroment
rm(list = ls())

# Clear graphics
graphics.off()

# Load libraries
suppressMessages(require(tidyverse, quietly = T))

# Load data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Factoring variables
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
MyDF$Predator.lifestage <- as.factor(MyDF$Predator.lifestage)
MyDF$Predator.taxon <- as.factor(MyDF$Predator.taxon)
#glimpse(MyDF)  # Inspecting data structure

# Adjusting measures of weight and units
MyDF$Prey.mass[MyDF$Prey.mass.unit == "mg"] <-  MyDF$Prey.mass[MyDF$Prey.mass.unit == "mg"] / 1000
MyDF[MyDF == "mg"] = "g"



##----------------------------------#
#           Plotting                #
##----------------------------------#

figure <- ggplot(MyDF, aes(x = log10(Prey.mass), y = log10(Predator.mass), color = Predator.lifestage)) + 
  geom_point(aes(shape = I(3))) +
  geom_smooth(method = "lm", fullrange = T) +
  facet_grid(Type.of.feeding.interaction~.) +
  xlab("Prey Mass in grams") +
  ylab("Predator mass in grams") +
  scale_x_continuous(breaks = c(-7, -3, 1), labels = c("1e-07", "1e-03", "1e+01")) +
  scale_y_continuous(breaks = c(-6, -2, +2, +6), labels = c("1e-06", "1e-02", "1e+02", "1e+06")) +
  theme_bw() +
  guides(color = guide_legend(nrow = 1)) +
  theme(legend.position = "bottom")


pdf("../results/PP_Regress_figure.pdf", width = 7.6, height = 10)
print(figure)
dev.off()


##----------------------------------#
#     Performing Linear Models      #
##----------------------------------#

# Setting te column names
lm_parameter_names <- c("Consumer Type", "Life stage", "Intercept", "Regression Slope",
                        "R_Squared", "F-Statistics", "Pvalue")

# Creating empty matrix to store parameters
PP_df <- as.data.frame(matrix(NA, nrow = 0, ncol = 7))

for (guild in unique(MyDF$Type.of.feeding.interaction)){
  guild_par <- subset(MyDF, MyDF$Type.of.feeding.interaction == guild)
  
  for (stage in unique(guild_par$Predator.lifestage)){
    lifestage_par <- subset(guild_par, guild_par$Predator.lifestage == stage)
    
    if (nrow(lifestage_par) > 2){  # If the data has more then 2 observations
      linear_mod <- summary(lm(log10(lifestage_par$Predator.mass)~log10(lifestage_par$Prey.mass)))
      
      model_results <- c(guild,
                            stage,
                            round(linear_mod$coefficients[[1]], 5),  # Intercept
                            round(linear_mod$coefficients[[2]], 5),  # Slope
                            round(linear_mod$r.squared, 5),          # R Squared
                            round(linear_mod$fstatistic[[1]], 5),    # F Statistics
                            linear_mod$coefficients[[2,4]]           # P Value
                            )
      
      PP_df <- rbind(PP_df, model_results)  # Attach to data frame
    }
  }
}

colnames(PP_df) <- lm_parameter_names
PP_df[, c(3:7)] <- sapply(PP_df[, c(3:7)], as.numeric)  # defining numeric cells

# Saving file to csv
write.csv(PP_df, "../results/PP_Regress_Results.csv", row.names = F)


**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 


**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

======================================================================
Inspecting script file vectorize1.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: vectorize.R
## Description: This script illustrates the differences using normal operations
##              against in-built functions that uses vectorization
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clear environmnet
rm(list = ls())


#===========================
# Vectorization
#===========================


M <- matrix(runif(1000000), 1000, 1000)

SumAllElements <- function(M){
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot <- Tot + M[i, j]
    }
  }
  return(Tot)
}


print("Testing loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))



**********************************************************************

Testing vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Testing loops, the time taken is:"
   user  system elapsed 
  0.092   0.001   0.093 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.002   0.001   0.002 

**********************************************************************

Code ran without errors

Time consumed = 0.56230s

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: browse.R
## Description: This script tests for debugging steps using different functions
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())


# Testing browser() function
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Pre-allocation of memory in empty vector
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    # browser()
  }
  return (N)
}

Exponential(10)
plot(Exponential(), type="l", main="Exponential growth")

# # Rscript produces unwanted file, which is removed below
# invisible(file.exists("Rplots.pdf"))
# invisible(file.remove("Rplots.pdf"))

**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
 [1]    10.00000    27.18282    73.89056   200.85537   545.98150  1484.13159
 [7]  4034.28793 10966.33158 29809.57987 81030.83928

**********************************************************************

Code ran without errors

Time consumed = 0.40084s

======================================================================
Inspecting script file Florida_LaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Author: Vitor Ferreira f.ferreira22@imperial.ac.uk
# Script: Florida_LaTeX.sh.sh
# Description: This script captures the tex argument, runs the Rscript to produce the figures needed for the consequent tex document and converts it to pdf.
# Arguments: A LaTeX file should be provided
# Date: Oct 2022



# Asking for input from the user
if [ $# -eq 0 ]
    then
        echo "A TEX file should be supplied!"
    exit
fi

# Running Florida.R script to produce the graphs that will be pulled from results directory
Rscript Florida.R

# Get the argument and strip the extension
a=`basename -s .tex $1`

# Initiate the Compilation of .tex file
pdflatex $a.tex
bibtex $a
pdflatex $a.tex
pdflatex $a.tex
mv $a.pdf ../results/
evince ../results/$a.pdf &

# After compilation, files created will be removed
rm *.aux
rm *.log
rm *.bbl
rm *.blg

#exit

**********************************************************************

Testing Florida_LaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
A TEX file should be supplied!

**********************************************************************

Code ran without errors

Time consumed = 0.00544s

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: boilerplate.R
## Description: A boilerplate R script
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Initialising function
MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
  
  return (c(Arg1, Arg2)) # this is optional, but useful!!!
}

# Testing function
MyFunction(1,2)
MyFunction("Riki","Tiki") # with different type now


**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.36070s

======================================================================
Inspecting script file Florida_Prac.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{float}
\usepackage[left=15mm, right=15mm, top=5mm, bottom=5mm]{geometry}
\usepackage{subcaption}

\title{Is Florida getting warmer?}

\author{Vitor Ferreira \\ MRes CMEE -- f.ferreira22@imperial.ac.uk}

\date{\today}

\begin{document}
  \maketitle
  
    \section{Introduction}

    There are increasing warnings that temperatures are rising across the globe. During the practical in Biological Computing in R from the TheMulQuaBio repo, we were presented with recorded temperatures across several years in Florida. We investigated here if re-sampling these temperatures would give us the same pattern as seen initially.
    
  \section{Methods}

    We used sampled data for Key West area and calculate the correlation coefficient betwen Temperatures and Year.
    After, we generate a random sample of the temperatures across the years and iterate this operation 1,000 times. For each iteration we calculated its relative correlation coefficient and after produced the histogram of the coefficients. To understand the significance of our results we calculate the probability of our randomized results being equal to the unsampled correlation, by chance.
    This was calculated as follows:
  
  \begin{equation}
    P(x) = \frac{TotalCorrelationsGreaterThan}{Total Iterations}
  \end{equation}


  \section{Results}

    \begin{figure}[H]
      \centering
      \begin{subfigure}{.45\textwidth}
        \centering
        \includegraphics[width=.75\linewidth]{../results/Florida_Temperatures.png}
        \caption{Temperature Scatterplot}
        \label{fig:sub1}
      \end{subfigure}
      \begin{subfigure}{.45\textwidth}
        \centering
        \includegraphics[width=.75\linewidth]{../results/Florida_Corr_Histogram.png}
        \caption{Frequency of Correlations}
        \label{fig:sub2}
      \end{subfigure}
      \label{fig:test}
    \end{figure}


  \section{Discussion}

    We conclude that, despite evidence amounting for the increase of temperatures across the globe, our randomized sampling indicates a correlation different from initial calculated correlation.
    
    
  \bibliographystyle{plain}
   
\end{document}
**********************************************************************

Testing Florida_Prac.tex...

======================================================================
Inspecting script file vectorize2.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: vectorize2.R
## Description: This script contains  one solution for the problem of the Ricker
##              model provided by Samraat Pawar located in the TheMulQuaBio repo
##              (https://mhasoba.github.io/TheMulQuaBio/notebooks/08-Data_R.html#id3)
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: none
## Outputs: none
## Options: none
##------------------------------------------

# Clean enviroment
rm(list = ls())


# Runs the stochastic Ricker equation with gaussian fluctuations
set.seed(12345)

stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix

  N[1, ] <- p0

  for (pop in 1:length(p0)) { #loop through the populations

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)

}


# Stochastic Rickel function vectorized
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  
  N <- matrix(NA, numyears, length(p0))  # Initialize empty matrix
  
  
  # My proposal of efficiency for the model is to remove one loop that would 
  # iterate over the populations and provide a vector with same size of population
  # with random numbers at each year
  
  N[1, ] <- p0 # Here we set initial parameters for the populations at Year 1
               # according to the random numbers generated from runif()
  
  for (yr in 2:numyears){ # Here we will loop over the years across all populations
      
      N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(length(p0), 0, sigma))
      
    }
    
  return(N)
}


# Printing system times
print("Vectorized Stochastic Ricker takes:")
print(system.time(res <- stochrick()))

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 <- stochrickvect()))


**********************************************************************

Testing vectorize2.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.408   0.016   0.423 
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.026   0.000   0.026 

**********************************************************************

Code ran without errors

Time consumed = 0.89296s

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: control_flow.R
## Description: Script illustrating the use of control flow statements
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

# IF statements

a <- TRUE
if (a == TRUE) {
  print("a is TRUE")
} else {
  print("a is FALSE")
}


# Generates uniform random numbers
z <- runif(1)
if (z <= 0.5) {
  print ("Less than a half")
}


# FOR loops
for (i in 1:10) {
  j <- i * i
  print(paste(i, "squared is", j))
}


# FOR loops on strings
for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
  print(paste('The species is', species))
}


# WHILE loops
i <- 0
while (i < 10) {
  i <- i+1
  print(i^2)
}


print("Script is completed!!!!")



**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "Less than a half"
[1] "1 squared is 1"
[1] "2 squared is 4"
[1] "3 squared is 9"
[1] "4 squared is 16"
[1] "5 squared is 25"
[1] "6 squared is 36"
[1] "7 squared is 49"
[1] "8 squared is 64"
[1] "9 squared is 81"
[1] "10 squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100
[1] "Script is completed!!!!"

**********************************************************************

Code ran without errors

Time consumed = 0.45347s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: DataWrangTidy.R
## Description: Script illustrating  data wrangling techniques with tidyverse
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Load libraries
suppressMessages(require(tidyverse, quietly = T))


################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
print("Data Wrangling with tidyverse...")

# Load the dataset 
MyData <- suppressMessages(read_csv("../data/PoundHillData.csv", show_col_types = FALSE))
MyData <- as.data.frame(MyData)

# Replace species absences with zeros
MyData[is.na(MyData)] <- 0

# header = true because we do have metadata headers
MyMetaData <- read_delim("../data/PoundHillMetaData.csv", delim = ";", show_col_types = FALSE)


# Transpose the data using a rudimentary technique but efficient
MyData <- MyData %>% 
  rownames_to_column() %>%
  pivot_longer(-rowname) %>% 
  pivot_wider(names_from = rowname, values_from = value)


# Removing Variable names and adding to new dataframe
TempData <- as_tibble(MyData[-1,])
colnames(TempData) <- MyData[1,]


# We will use gather() function to transform the data to long format
#ncol(TempData)
TempData <- TempData %>% gather(key = "Species",
                                 value = "Count", 5:45)


MyWrangledData <- TempData %>% 
  mutate(Cultivation = as.factor(Cultivation),
         Block = as.factor(Block),
         Plot = as.factor(Plot),
         Quadrat = as.factor(Quadrat),
         Count = as.integer(Count))

print("Done!!!")
**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Data Wrangling with tidyverse..."
[1] "Done!!!"

**********************************************************************

Code ran without errors

Time consumed = 4.04176s

======================================================================
Inspecting script file SQLinR.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: SQLinR.R
## Description: This script leads with databases manipulations and queries
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: Resource.csv
##------------------------------------------

# Loading required packages
suppressMessages(require(sqldf, quietly = T))

# The command below opens a connection to the database.
# If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='../results/Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames



**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in dbConnect(SQLite(), dbname = "../results/Test.sqlite") : 
  could not find function "dbConnect"
Execution halted

======================================================================
Inspecting script file PP_Dists.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: PP_Dists.R
## Description: This script analyses the Bodymass distributions and produces 
##              individual and ratio plots, and a results summary file
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: EcolArchives-E089-51-D1.csv
## Outputs: Pred_subplots.pdf, Prey_subplots.pdf, SizeRatio_subplots.pdf,
##          PP_results.csv
##------------------------------------------

# Clean enviroment
rm(list = ls())

# Clear graphics
graphics.off()

# Load libraries
suppressMessages(require(tidyverse, quietly = T))

# Initialising analysis
print("Running Bodymass Distributions...")

# Load data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# glimpse(MyDF)  # Inspecting data structure

# Factoring variables
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)

# Adjusting measures of weight and units
MyDF$Prey.mass[MyDF$Prey.mass.unit == "mg"] <-  MyDF$Prey.mass[MyDF$Prey.mass.unit == "mg"] / 1000
MyDF[MyDF == "mg"] = "g"

# Data Histogram
hist(log10(MyDF$Predator.mass), breaks = 20, col = rgb(1, 0, 0, 0.5),
     xlab = "Log10(Body Mass (g))", ylab = "Count",
     main = "Predator-prey size overlap")
hist(log10(MyDF$Prey.mass), breaks = 20, add = T, col = rgb(0, 1, 0, 0.5))
legend("topleft", c("Predator", "Prey"),
       fill = c(rgb(1, 0, 0, 0.50), rgb( 0, 1, 0, 0.5)))



##----------------------------------#
#           Plotting                #
##----------------------------------#

# Predator Biomass Distribution
pdf("../results/Pred_subplots.pdf",  # Opening PDF
    width = 11.7, height = 8.3)     # Setting document dimensions in inches
hist(log10(MyDF$Predator.mass), breaks = 20, col = rgb(1, 0, 0, 0.5),
     xlab = "Log10(Body Mass (g))", ylab = "Count",
     main = "Predator Bodymass")
dev.off()

# Prey Biomass Distribution
pdf("../results/Prey_subplots.pdf",
    width = 11.7, height = 8.3)
hist(log10(MyDF$Prey.mass), breaks = 20, col = rgb(0, 1, 0, 0.5),
     xlab = "Log10(Body Mass (g))", ylab = "Count",
     main = "Prey Bodymass")
dev.off()

# Prey-Predator Mass Ratios
MyDF <- MyDF %>% 
  mutate(PPMR = log10(Prey.mass / Predator.mass))

# Plotting rations

pdf("../results/SizeRatio_subplots.pdf", width = 11.7, height = 8.3)
par(mfrow = c(3, 2))  # defining plotting parameters
for (guild in unique(MyDF$Type.of.feeding.interaction)){
  temp <- subset(MyDF, MyDF$Type.of.feeding.interaction == guild)
  hist(temp$PPMR, breaks = 20, main = guild,
       xlab = "Predator-Prey Mass Ratios",
       ylab = "Counts")
  rm(temp)
  }
dev.off()



##----------------------------------#
#       Centrality Measures         #
##----------------------------------#

# Log Means and Medians Calculation

Centrality_feeding <- MyDF %>% 
  group_by(Type.of.feeding.interaction) %>% 
  summarise(LogPred_mean = round(mean(log10(Predator.mass)), 3),
            LogPred_median = round(median(log10(Predator.mass)), 3),
            LogPrey_mean = round(mean(log10(Prey.mass)), 3),
            LogPrey_median = round(median(log10(Prey.mass)), 3),
            LogPPMR_mean = round(mean(PPMR), 3),
            LogPPMR_median = round(median(PPMR), 3))


# Write output to table
write.csv(Centrality_feeding, "../results/PP_results.csv", row.names = F)
print("Completed!!!")

**********************************************************************

Testing PP_Dists.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Running Bodymass Distributions..."
pdf 
  2 
pdf 
  2 
pdf 
  2 
[1] "Completed!!!"

**********************************************************************

Code ran without errors

Time consumed = 2.88375s

======================================================================
Inspecting script file preallocate.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: preallocate.R
## Description: This script is testing pre-allocation of memory
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clear environmnet
rm(list = ls())

#==============================
# Pre-allocate
#==============================


# Initially we create an empty vector but without any pre-allocated memory in space
NoPreAllocFunc <- function(x){
  print(paste("No allocated memory for", x, "iterations!!!"))
  a <- vector()
  for (i in 1:x){
    a <- c(a, i)
    # print(a)
    # print(object.size(a))
  }
}
print("Runtime of function without pre-allocating any memory in space:")
print(system.time(NoPreAllocFunc(10000)))


# In the following example we are pre-allocating memory space to execute the functions
PreAllocFun <- function(x){
  print(paste("Pre-allocating memory space for", x, "iterations!!!"))
  a <- rep(NA, x) # here we assigned empty space to "x" values
  for (i in 1:x){
    a[i] <- i
    # print(a)
    # print(object.size(a))
  }
}

print("Runtime of function where we pre-allocate memory previously:")
print(system.time(PreAllocFun(10000)))

**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Runtime of function without pre-allocating any memory in space:"
[1] "No allocated memory for 10000 iterations!!!"
   user  system elapsed 
  0.146   0.023   0.169 
[1] "Runtime of function where we pre-allocate memory previously:"
[1] "Pre-allocating memory space for 10000 iterations!!!"
   user  system elapsed 
  0.006   0.000   0.006 

**********************************************************************

Code ran without errors

Time consumed = 0.54428s

======================================================================
Inspecting script file try.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: try.R
## Description: This script illustrate the use of techniques to capture errors
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())


# Defining function
doit <- function(x) {
  temp_x <- sample(x, replace = TRUE)
  if(length(unique(temp_x)) > 30) { # ensuring enough sample size
    print(paste("Mean of this sample was:", as.character(mean(temp_x))))
  } 
  else {
    stop("Couldn't calculate mean: too few unique values!")
  }
}


# Generating population
set.seed(1345)
popn <- rnorm(50)
hist(popn)

# Sampling over for 15 times
# lapply(1:15, function(i) doit(popn)) # It will generaly break
result <- lapply(1:15, function(i) try(doit(popn), TRUE)) # here silent is set to FALSE
result


# Example of storing manually the results above
result <- vector("list", 15)  # pre allocation of memory space
for (i in 1:15){
  result[[i]] <- try(doit(popn), TRUE)  # did not set silent as it is by default set to FALSE
}


**********************************************************************

Testing try.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Mean of this sample was: -0.11620822588674"
[1] "Mean of this sample was: -0.0468516755995931"
[1] "Mean of this sample was: -0.0890228211466614"
[1] "Mean of this sample was: -0.124229742255296"
[1] "Mean of this sample was: 0.0314144452816157"
[1] "Mean of this sample was: -0.233476945796405"
[1] "Mean of this sample was: -0.196681538928001"
[1] "Mean of this sample was: 0.0146969612111605"
[1] "Mean of this sample was: -0.234913159471725"
[1] "Mean of this sample was: -0.0497464588165691"
**********************************************************************

Code ran without errors

Time consumed = 0.40684s

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: MyBars.R
## Description: Script with annotation plot example
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: none
## Outputs: MyBars.pdf
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Clear graphics
#graphics.off()

# Load Libraries
suppressMessages(require(tidyverse, quietly = T))

# Loading data
a <- suppressMessages(read_table('../data/Results.txt'))

##----------------------------------#
###         Data Wrangling        ###
##----------------------------------#

# append a column of zeros
a$ymin <- rep(0, dim(a)[1])

# Print the first linerange
p <- ggplot(a)
p <- p + 
  geom_linerange(data = a, aes(x = x, ymin = ymin, ymax = y1, size = (0.5)),
                 colour = "#E69F00",
                 alpha = 1/2,
                 show.legend = FALSE)

# Print the second linerange
p <- p +
  geom_linerange(data = a, aes( x = x, ymin = ymin, ymax = y2, size = (0.5)), 
                 colour = "#56B4E9", 
                 alpha = 1/2,
                 show.legend = FALSE)

# Print the third linerange:
p <- p + 
  geom_linerange(data = a, aes( x = x, ymin = ymin, ymax = y3, size = (0.5)),
                 colour = "#D55E00", 
                 alpha = 1/2,
                 show.legend = FALSE)

# Annotate the plot with labels:
p <- p + 
  geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p +
  scale_x_continuous("My x axis", breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 

pdf("../results/MyBars.pdf")
print(p)
graphics.off()


**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
Removed 91 rows containing missing values (geom_text). 

======================================================================
Inspecting script file Ricker.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: Ricker.R
## Description: Script with Ricker Population Model function
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# This script introduce the Ricker model (1954) which is a population model of 
# recruitment stock in fisheries. It gives the expected density of individuals
# in generation as function of previous number of individuals from previous generation

Ricker <- function(N0=1, r=1, K=10, generations=50){
  
  # Runs simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations) # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return(N)
}

plot(Ricker(generations = 10), type="l")

# Rscript produces unwanted file, which is removed below
invisible(file.exists("Rplots.pdf"))
invisible(file.remove("Rplots.pdf"))

**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.41486s

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: break.R
## Description: Script illustrating the implementation of break argument
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

# Making use of break over a while loop
i <- 0 # setting variable

while (i < Inf) {
  if (i == 10) {
    break 
  } else { # Break out of the while loop!  
    cat("i equals " , i , " \n")
    i <- i + 1 # Updates i for every iteration
  }
}
**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  

**********************************************************************

Code ran without errors

Time consumed = 0.34136s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: apply1.R
## Description: Testing family of apply functions
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

#=============================
# Using apply() functions
#=============================

# Build random matrix
M <- matrix(rnorm(100), 10, 10)

# Function execution by ROW
# Take the mean on each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

# Calculating variance also
RowVars <- apply(M, 1, var)
print(RowVars)


# Function execution by COLUMN
# Take the mean on each row
ColMeans <- apply(M, 2, mean)
print(ColMeans)

# Calculating variance also
ColVars <- apply(M, 2, var)
print(ColVars)

**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1] -0.83778042  0.17461152 -0.02002123 -0.07103688  0.89401377 -0.46515889
 [7]  0.15266251 -0.54964700 -0.02623932  0.36200133
 [1] 0.8118771 0.4215085 0.4622153 1.9696114 0.4162965 0.8027862 0.6599190
 [8] 1.1352843 1.5297618 0.7772109
 [1]  0.22079817  0.18350662 -0.29268592 -0.16866590  0.31372742  0.02177808
 [7]  0.37233786 -0.49102613 -0.11791150 -0.42845330
 [1] 1.5830162 0.9813294 0.7050149 0.4009727 0.7493362 0.9456111 0.9965852
 [8] 1.4395469 1.3405005 1.3311583

**********************************************************************

Code ran without errors

Time consumed = 0.32495s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: basic_io.R
## Description: Simple script illustrating R inputs and outputs
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

# Inspecting how to work with Inputs and Outputs in R

# Load data
MyData <- read.csv("../data/trees.csv", header = TRUE) # with headers imported

# Write new file
write.csv(MyData, "../results/MyData.csv")

# Appending row to table
# This line of code only works ignoring the column names (setting append = FALSE)
write.table(MyData[1,], file = "../results/MyData.csv", append=F)

# Including row names
write.csv(MyData, "../results/MyData.csv", row.names=TRUE, col.names = FALSE)

# Ignoring column names
write.table(MyData, "../results/MyData.csv", col.names=FALSE)

# Including column names
write.table(MyData, "../results/MyData.csv", row.names=F, col.names=T)

print("Script Complete!!!")


**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Script Complete!!!"

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In write.csv(MyData, "../results/MyData.csv", row.names = TRUE,  :
  attempt to set 'col.names' ignored

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: DataWrang.R
## Description: Script illustrating the data wrangling techniques
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Load libraries
suppressMessages(require(reshape2, quietly = T))
suppressMessages(require(tidyverse, quietly = T))

################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################


#Load the dataset 
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

# Inspect the dataset
head(MyData)
dim(MyData)
str(MyData)
# fix(MyData) #you can also do this
# fix(MyMetaData)

# Transpose
# To get those species into columns and treatments into rows 
MyData <- t(MyData)

head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
# Using melt() function from reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############

head(MyWrangledData)

unique(MyWrangledData$Species)
unique(MyWrangledData$Quadrat) 

hist(MyWrangledData$Count)


#### Messing with tidyverse ###

tidyverse_conflicts()
tidyverse_packages()
tidyverse_update()

filter(MyWrangledData, Count>100)

slice(MyWrangledData, 10:15)



#Tidyverse approach
MyWrangledData %>% 
  group_by(Species) %>% 
  summarise(avg = mean(Count))

# R Base approach
aggregate(MyWrangledData$Count, by = list(MyWrangledData$Species), FUN = mean)

# Rscript produces unwanted file, which is removed below
invisible(file.exists("Rplots.pdf"))
invisible(file.remove("Rplots.pdf"))

**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 4.16635s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: plotLin.R
## Description: Script with mathematical annotation in plot
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: none
## Outputs: MyLinReg.pdf
##------------------------------------------


# Clean enviroment
rm(list = ls())

# Clear graphics
graphics.off()

# Load Libraries
suppressMessages(require(tidyverse, quietly = T))


# Setting up variables
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x + rnorm(length(x), mean = 0., sd = 2.5)

# Setting dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plotting the data
p <-  ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(expression(alpha^2 * pi / beta * sqrt(Theta)))


# add the regression line
p <- p + geom_abline(intercept = my_lm$coefficients[1][1],
                     slope = my_lm$coefficients[2][1],
                     colour = "red")

# throw some math on the plot
p <- p + 
  geom_text(aes(x = 60, y = 0,
                label = "sqrt(alpha) * 2* pi"), 
            parse = TRUE, size = 6, 
            colour = "blue")

pdf("../results/MyLinReg.pdf")
print(p)
graphics.off()


**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 2.43113s

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: GPDD_Data.R
## Description: This script plots the distributions of populations form GPDD database
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: GPDDFiltered.RData
## Outputs: GPDD_populations.pdf
##------------------------------------------


# Clean enviroment
rm(list = ls())

# # Clear graphics
# graphics.off()

# Load libraries
suppressMessages(require(tidyverse, quietly = T))
suppressMessages(require(maps, quietly = T))

# Load data
load("../data/GPDDFiltered.RData")

# Get the world data for the outlines of continents
world_data <- map_data("world")

print("Creating world map distribution of populations from GPDD database...")

# Plotting the world map
wmap <- ggplot() +
  geom_polygon(data = world_data, aes(x = long, y = lat, group = group), 
               fill = "light grey", color = "black") +
  coord_fixed(1.3) +
  geom_point(data = gpdd, aes(x = long, y = lat), col = "red", size = 0.8) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank(),
    axis.title = element_blank()
  )

pdf("../results/GPDD_populations.pdf", width = 11.7, height = 8.3)
print(wmap)
dev.off()

print("Done!!! Populations distribution map can be found in the results folder!!!")


#--------------------------------#
#         Comments               #
#--------------------------------#


# It is to note that the distribution of the populations is biased towards north.
# Most of the species found in the dataset are located either in North America or Europe.
# It is suggested that the analysis of this dataset should be done carefully and accounting for this effect.
# 
#


**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
Calls: load -> readChar
In addition: Warning message:
In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file '../data/GPDDFiltered.RData', probable reason 'No such file or directory'
Execution halted

======================================================================
Inspecting script file Florida.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: Florida.R
## Description: Analysis script on the practical "Is Florida getting warmer?"
#               from TheMulQuaBio repo
#               https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#id2
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
## Inputs: KeyWestAnnualMeanTemperature.RData
## Outputs: Florida_Temperatures.pdf, Florida_Corr_Histogram.pdf
##------------------------------------------

# Clear environmnet
rm(list = ls())

# Clear graphics
graphics.off()

print("Initialising analysis on Florida Practical...")

# Loading data
load("../data/KeyWestAnnualMeanTemperature.RData")

# Correlations between Years and Temperature
long_term_cor <- round(cor(ats$Year, ats$Temp), 2)

print("*** Plotting and saving scatterplot in results! ***")

# Initial plotting
png("../results/Florida_Temperatures.png")
plot(ats$Year, ats$Temp,
     main = "Annual Temperatures from Key West in Florida",
     xlab = "Year",
     ylab = "Temperature (\u00b0C)")
text(x = 1980, y = 24.5, paste( "r = ", long_term_cor), col = "red")
abline(lm(ats$Temp ~ ats$Year), col = "red", lty = 3, lwd = 2)
graphics.off()



print("*** Sampling data and calculating correlation coefiicients...***")
# Randomly generating samples
sample_cor <- vector( , 1000)
for (i in 1:1000){
  Temp <- sample(ats$Temp)
  sample_data <- data.frame(ats$Year, Temp)
  
  sample_cor[i] <- cor(ats$Year, sample_data$Temp)
  sample_cor <- as.numeric(sample_cor)
}

print("*** Plotting and saving coefficent histogram in results! ***")
# Plotting Histogram
png("../results/Florida_Corr_Histogram.png")
hist(sample_cor, breaks = 50, 
     main = "Histogram of Sampled Correlations",
     xlab = "Correlations Coefficients",
     xlim = c(-0.5, 0.5))
# abline(v = long_term_cor, lty = 3, lwd= 3, col = "red")
graphics.off()

print("Done!!!")
# Calculating P-value
# permutations > r / # total permutations
(sum((sample_cor > long_term_cor))) / 10000

**********************************************************************

Testing Florida.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Initialising analysis on Florida Practical..."

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
Calls: load -> readChar
In addition: Warning message:
In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file '../data/KeyWestAnnualMeanTemperature.RData', probable reason 'No such file or directory'
Execution halted

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: next.R
## Description: Script illustrating the implementation of the next argument
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

for (i in 1:10) {
  if ((i %% 2) == 0) # checking if number is odd!!
    next # pass to next iteration
  print(i)
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.33679s

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: sample.R
## Description: This script tests a compilation of techniques using normal operations,
##              Loops, List on vectors, with and without pre-allocation of memory,
##              and also the use o apply family functions such as SAPPLY for vector 
##              output, or LAPPY for lists output
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())

#==============================
# LAPPLY and SAPPLY functions
#==============================

########## FUNCTIONS ###########

# --- Sample Function ------
# A function to take a sample size n from a population "popn" and returns its mean
myexperiment <- function(popn, n){
  pop_sample <- sample(popn, n, replace = FALSE)
  return(mean(pop_sample))
}


#----------------------
# --- Function 1 ------
# Calculate means using FOR loop on a vector without pre-allocation:
loopy_sample1 <- function(popn, n, num){
  result1 <- vector() # Empty vector of size 1
  for (i in 1:num){
    result1 <- c(result1, myexperiment(popn, n))
  }
  return(result1)
}


#----------------------
# --- Function 2 ------
# Runs "num" of iterations of the experiment using FOR loop on a VECTOR with preallocation
loopy_sample2 <- function(popn, n, num){
  result2 <- vector( , num) # Pre-allocate size
  for (i in 1:num){
    result2[i] <- myexperiment(popn, n)
  }
  return(result2)
}


#----------------------
# --- Function 3 ------
# Runs "num" of iterations of the experiment using FOR loop on a LIST with preallocation
loopy_sample3 <- function(popn, n, num){
  result3 <- vector("list", num) # Pre-allocate size
  for (i in 1:num){
    result3[[i]] <- myexperiment(popn, n)
  }
  return(result3)
}

#----------------------
# --- Function 4 ------
# Run "num" iterations of the experiment using LAPPLY:
lapply_sample <- function(popn, n, num){
  result4 <- lapply(1:num, function(i) myexperiment(popn, n))
  return(result4)
}


#----------------------
# --- Function 5 ------
# Run "num" iterations of the experiment using SAPPLY:
sapply_sample <- function(popn, n, num){
  result5 <- sapply(1:num, function(i) myexperiment(popn, n))
  return(result5)
}


###################################
### INITIALIZING SIMULATIONS ###
###################################

#---------- SETTING SEED ----------
set.seed(12345)
popn <- rnorm(10000)
hist(popn)

#------ SETTING SIMULATION PARAMETERS ------
n <- 1000 # sample size of experiment
num <- 100 # number of experimental iterations 


print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))

**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.036   0.004   0.041 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.016   0.000   0.016 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.015   0.000   0.015 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.012   0.000   0.011 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 0.57754s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
#!usr/bin/env Rscript

##------------------------------------------
## Name: R_conditional.R
## Description: R script for testing functions with conditionals
## Author: Vitor Ferreira, f.ferreira22@imperial.ac.uk
## Date: October 2022
##------------------------------------------

# Clean enviroment
rm(list = ls())


print("Testing functions with conditionals:")


# Check if integer is even or odd!!!
is.even <- function(n = 2) {
  print(paste("*** Is even or odd? n =", n, "***"))
  if (n %% 2 == 0) {
    return(paste(n,'is even!'))
  } else {
    return(paste(n,'is odd!'))
  }
}
print(is.even(6))


##------------------------------------------
# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  print(paste("*** Is",  n, "the power of 2 ***"))
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
    return(paste(n,'is not a power of 2!'))
  }
}

print(is.power2(4))


##------------------------------------------
# Checks if a number is prime
is.prime <- function(n) {
  print(paste("*** Is",  n, "a prime? ***"))
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
  
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
    return(paste(n,'is a composite!'))
  }
}

print(is.prime(3))





**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Testing functions with conditionals:"
[1] "*** Is even or odd? n = 6 ***"
[1] "6 is even!"
[1] "*** Is 4 the power of 2 ***"
[1] "4 is a power of 2!"
[1] "*** Is 3 a prime? ***"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.38388s

======================================================================
======================================================================
Finished running scripts

Ran into 6 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!